/**
 * 钉钉API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.choerodon.devops.infra.dingtalk.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * 获取AccessToken的返回
 */
@ApiModel(description = "获取AccessToken的返回")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-07-14T17:49:16.234+08:00")
public class MessageResult extends Result  {
  @JsonProperty("invaliduser")
  private String invaliduser = null;

  @JsonProperty("invalidparty")
  private String invalidparty = null;

  @JsonProperty("forbiddenUserId")
  private String forbiddenUserId = null;

  @JsonProperty("messageId")
  private String messageId = null;

  public MessageResult invaliduser(String invaliduser) {
    this.invaliduser = invaliduser;
    return this;
  }

   /**
   * 无效的userid
   * @return invaliduser
  **/
  @ApiModelProperty(example = "null", value = "无效的userid")
  public String getInvaliduser() {
    return invaliduser;
  }

  public void setInvaliduser(String invaliduser) {
    this.invaliduser = invaliduser;
  }

  public MessageResult invalidparty(String invalidparty) {
    this.invalidparty = invalidparty;
    return this;
  }

   /**
   * 无效的部门id
   * @return invalidparty
  **/
  @ApiModelProperty(example = "null", value = "无效的部门id")
  public String getInvalidparty() {
    return invalidparty;
  }

  public void setInvalidparty(String invalidparty) {
    this.invalidparty = invalidparty;
  }

  public MessageResult forbiddenUserId(String forbiddenUserId) {
    this.forbiddenUserId = forbiddenUserId;
    return this;
  }

   /**
   * 因发送消息过于频繁或超量而被流控禁止发送的userid。  未被禁止的接收者仍会被成功发送。限流规则包括：  1. 给同一用户发相同内容消息一天仅允许一次； 2. 如果是ISV接入方式，给同一用户发消息一天不得超过100次；如果是企业接入方式，此上限为500。 
   * @return forbiddenUserId
  **/
  @ApiModelProperty(example = "null", value = "因发送消息过于频繁或超量而被流控禁止发送的userid。  未被禁止的接收者仍会被成功发送。限流规则包括：  1. 给同一用户发相同内容消息一天仅允许一次； 2. 如果是ISV接入方式，给同一用户发消息一天不得超过100次；如果是企业接入方式，此上限为500。 ")
  public String getForbiddenUserId() {
    return forbiddenUserId;
  }

  public void setForbiddenUserId(String forbiddenUserId) {
    this.forbiddenUserId = forbiddenUserId;
  }

  public MessageResult messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

   /**
   * 标识企业消息的id，字符串，最长128个字符
   * @return messageId
  **/
  @ApiModelProperty(example = "null", value = "标识企业消息的id，字符串，最长128个字符")
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageResult messageResult = (MessageResult) o;
    return Objects.equals(this.invaliduser, messageResult.invaliduser) &&
        Objects.equals(this.invalidparty, messageResult.invalidparty) &&
        Objects.equals(this.forbiddenUserId, messageResult.forbiddenUserId) &&
        Objects.equals(this.messageId, messageResult.messageId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invaliduser, invalidparty, forbiddenUserId, messageId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageResult {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    invaliduser: ").append(toIndentedString(invaliduser)).append("\n");
    sb.append("    invalidparty: ").append(toIndentedString(invalidparty)).append("\n");
    sb.append("    forbiddenUserId: ").append(toIndentedString(forbiddenUserId)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

